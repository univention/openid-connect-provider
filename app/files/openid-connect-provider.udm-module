# -*- coding: utf-8 -*-
#
# Copyright 2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

from univention.admin.layout import Tab, Group
import univention.admin.filter
import univention.admin.handlers
import univention.admin.syntax

translation = univention.admin.localization.translation('univention.admin.handlers.openid-connect-provider')
_ = translation.translate

module = 'oidc/rpservice'
superordinate = 'settings/cn'
childs = 0
short_description = _(u'OpenID Connect relying party service')
long_description = _(u'Management of OpenID provider configuration for services')
operations = ['add', 'edit', 'remove', 'search', 'move']
default_containers = ["cn=oidc,cn=univention"]
help_text = _(u'Management of OpenID provider configurations for services')

options = {}

property_descriptions = {
	'name': univention.admin.property(
		short_description=_(u'Service name'),
		long_description=_(u'Name of the service that connects to this configuration. Corresponds to "name" option in configfile'),
		syntax=univention.admin.syntax.string,
		multivalue=False,
		options=[],
		required=True,
		may_change=True,
		identifies=True,
	),
	'clientid': univention.admin.property(
		short_description=_(u'Client ID identifier'),
		long_description=_(u'Corresponds to "client_id" option in configfile'),
		syntax=univention.admin.syntax.string,
		multivalue=False,
		options=[],
		required=True,
		may_change=True,
		identifies=False,
	),
	'clientsecret': univention.admin.property(
		short_description=_(u'Client secret'),
		long_description=_(u'Corresponds to "secret" option in configfile'),
		syntax=univention.admin.syntax.string,
		multivalue=False,
		options=[],
		required=True,
		may_change=True,
		identifies=False,
	),
	'trusted': univention.admin.property(
		short_description=_(u'Trusted'),
		long_description=_(u'Corresponds to "trusted" option in configfile. If activated, user will not be asked for consent to transfer identity attributes'),
		syntax=univention.admin.syntax.booleanNone,
		multivalue=False,
		options=[],
		required=True,
		may_change=True,
		identifies=False,
		default="true",
	),
	'applicationtype': univention.admin.property(
		short_description=_(u'Service type (web or native)'),
		long_description=_(u'Corresponds to "application_type" option in configfile'),
		syntax=univention.admin.syntax.string,
		multivalue=False,
		options=[],
		required=True,
		may_change=True,
		identifies=False,
		default="web",
	),
	'redirectURI': univention.admin.property(
		short_description=_(u'Redirect URI'),
		long_description=_(u'URI the user is redirected to after authentication'),
		syntax=univention.admin.syntax.FiveThirdsString,
		multivalue=True,
		options=[],
		required=False,
		may_change=True,
		identifies=False,
	),
	'insecure': univention.admin.property(
		short_description=_(u'Set insecure flag'),
		long_description=_(u'Mark the service as insecure in the config. The default is "no", marking the service as secure'),
		syntax=univention.admin.syntax.booleanNone,
		multivalue=False,
		options=[],
		required=False,
		may_change=True,
		identifies=False,
	),
}

layout = [
	Tab(_(u'General'), _(u'Basic Settings'), layout=[
		Group(_('OIDC service settings'), layout=[
			["name", ],
			["clientid", ],
			["clientsecret", ],
			["trusted", ],
			["applicationtype", ],
			["redirectURI", ],
			["insecure", ],
		]),
	]),
]

mapping = univention.admin.mapping.mapping()
# mapping.register('isActivated', 'name', None, univention.admin.mapping.ListToString)
mapping.register('name', 'cn', None, univention.admin.mapping.ListToString)
mapping.register('clientid', 'clientid', None, univention.admin.mapping.ListToString)
mapping.register('clientsecret', 'clientsecret', None, univention.admin.mapping.ListToString)
mapping.register('trusted', 'trusted', None, univention.admin.mapping.ListToString)
mapping.register('insecure', 'insecure', None, univention.admin.mapping.ListToString)
mapping.register('applicationtype', 'applicationType', None, univention.admin.mapping.ListToString)
mapping.register('redirectURI', 'redirectURI')


class object(univention.admin.handlers.simpleLdap):
	module = module

	def _ldap_addlist(self):
		al = [('objectClass', ['top', 'univentionOIDCService'])]
		return al


def lookup(co, lo, filter_s, base='', superordinate=None, scope='sub', unique=False, required=False, timeout=-1, sizelimit=0):
	searchfilter = univention.admin.filter.conjunction('&', [
		univention.admin.filter.expression('objectClass', 'univentionOIDCService'),
	])

	if filter_s:
		filter_p = univention.admin.filter.parse(filter_s)
		univention.admin.filter.walk(filter_p, univention.admin.mapping.mapRewrite, arg=mapping)
		searchfilter.expressions.append(filter_p)

	res = []
	for dn in lo.searchDn(unicode(searchfilter), base, scope, unique, required, timeout, sizelimit):
		res.append(object(co, lo, None, dn))
	return res


def identify(distinguished_name, attributes, canonical=False):
	return 'univentionOIDCService' in attributes.get('objectClass', [])
