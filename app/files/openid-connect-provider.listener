# -*- coding: utf-8 -*-
#
# Univention Directory Listener
#
# Copyright 2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

__package__ = ''  # workaround for PEP 366

import yaml
import listener
import subprocess
import univention.debug as ud

name = 'openid-connect-provider'
description = 'Update oidc provider service configuration'
filter = '(objectClass=univentionOIDCService)'
target_file = '/etc/kopano/konnectd-identifier-registration.yaml'
attributes = []


def handler(dn, new, old):
	listener.setuid(0)
	try:
		filecontent = ""
		with open(target_file, 'r') as config:
			filecontent = yaml.safe_load(config)
			# Remove old entry. If it was modified, it will be readded below
			if old:
				if filecontent['clients']: # is empty when no relying party exists
					filecontent['clients'] = [client for client in filecontent['clients'] if client['name'] != old['cn'][0]]
			if new:
				client = {}
				client['name'] = new['cn'][0]
				client['id'] = new['clientid'][0]
				client['secret'] = new['clientsecret'][0]
				client['application_type'] = new['applicationType'][0]
				# udm syntax returns string, so convert new['trusted'][0] to bool.
				# otherwise, the result in the yaml will be a quoted string
				client['trusted'] = new['trusted'][0] in ['yes']  
				client['redirect_uris'] = new['redirectURI']
				if old and 'clients' in filecontent:
					for c in filecontent['clients']:
						if c['name'] == old['cn'][0]:
							del filecontent['clients'][client]
				if 'clients' not in filecontent:
					filecontent['clients'] = []
				if not isinstance(filecontent['clients'], list):
					filecontent['clients'] = []
					
				filecontent['clients'].append(client)

		if filecontent:
			with open(target_file, 'w') as config:
				config.write("# WARNING: this file is maintained by univention-directory-listener\n")
				config.write("# Additional services can be added with the UDM module oidc/rpservice\n")
				config.write("# Konnect needs to be restarted for changes to take effect.\n\n")
				yaml.dump(filecontent, config, default_flow_style=False)

		subprocess.call(['/usr/bin/univention-app', 'restart', 'openid-connect-provider'])
	except IOError as e:
		ud.debug(ud.LISTENER, ud.ERROR, 'IOError accessing config: %s' % e)

	finally:
		listener.unsetuid()
